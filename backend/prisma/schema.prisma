// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())

  addresses Address[]
  wishlist  Wishlist?
  cart      Cart?
  orders    Order[]
}

model Address {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  phone       String
  country     String
  countryCode String   @db.VarChar(2)
  province    String?
  city        String
  postalCode  String
  address     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model Book {
  id            Int      @id @default(autoincrement())
  ISBN          String   @unique @db.VarChar(13)
  slug          String   @unique
  title         String
  author        String
  publisher     String
  publishedDate DateTime
  description   String
  pageCount     Int
  averageRating Decimal  @db.Decimal(2, 1)
  ratingsCount  Int      @default(0)
  imageLink     String
  language      String   @db.VarChar(2)
  currentPrice  Decimal  @db.Decimal(12, 2)
  originalPrice Decimal  @db.Decimal(12, 2)
  discount      Int      @default(0)
  isBestseller  Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  categories Category[]
  wishlist   WishlistBook[]
  cartBook   CartBook[]
  orderBooks OrderBook[]
}

model Category {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  name      String
  thumbnail String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  books Book[]
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int            @unique
  user   User           @relation(fields: [userId], references: [id])
  books  WishlistBook[]
}

model WishlistBook {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  wishlistId Int
  bookId     Int
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  book       Book     @relation(fields: [bookId], references: [id])
}

model Cart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int        @unique
  user   User       @relation(fields: [userId], references: [id])
  books  CartBook[]
}

model CartBook {
  id        Int      @id @default(autoincrement())
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartId Int
  bookId Int
  cart   Cart @relation(fields: [cartId], references: [id])
  book   Book @relation(fields: [bookId], references: [id])
}

model Order {
  id        Int         @id @default(autoincrement())
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  userId Int
  user   User        @relation(fields: [userId], references: [id])
  books  OrderBook[]
}

model OrderBook {
  id        Int      @id @default(autoincrement())
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(12, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId Int
  bookId  Int
  order   Order @relation(fields: [orderId], references: [id])
  book    Book  @relation(fields: [bookId], references: [id])
}

enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  PROCESSING
  CANCELLED
  COMPLETED
}
